name: Deploy Prod Server

on:
  push:
    branches:
      - main # Triggers the workflow on push events to the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest # Specifies the type of runner the job will use (an Ubuntu environment)

    steps:
    - name: Checkout code # Checks out the repository code
      uses: actions/checkout@v3

    - name: Set up Python 3.12 # Sets up the specific Python version (3.12) for the environment
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Docker # Installs Docker
      uses: docker/setup-buildx-action@v2

    - name: Install Docker Compose # Installs Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose

    - name: Download prod env
      run: |
        chmod +x sh_download_vars_env.sh
        ./sh_download_vars_env.sh \
          ${{ secrets.REPO_OWNER }} \
          ${{ secrets.REPO_NAME }} \
          ${{ secrets.GIT_TOKEN }} \
          production \
          .env.prod

    - name: Download dev env
      run: |
        chmod +x sh_download_vars_env.sh
        ./sh_download_vars_env.sh \
          ${{ secrets.REPO_OWNER }} \
          ${{ secrets.REPO_NAME }} \
          ${{ secrets.GIT_TOKEN }} \
          development \
          .env

    - name: Install dependencies # Installs the Python dependencies from 'requirements.txt'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Docker inside GitHub env # Builds the Docker image from the Dockerfile in the project root
      run: make build

    - name: Start app inside GitHub env # Uses Docker Compose to run the application (Docker Compose files are in project root)
      run: make build ENV=prod

    - name: Stop app inside GitHub env # Stops everything
      run: make down ENV=prod

    # ---Production server env---
#    - name: Set up SSH to PROD server
#      uses: webfactory/ssh-agent@v0.5.3
#      with:
#        ssh-private-key: ${{ secrets.PROD_SSH }}
#
#    - name: Download prod env on PROD server
#      run: |
#        ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
#          cd ${{ secrets.PROJ }}/
#          chmod +x sh_download_vars_env.sh
#          ./sh_download_vars_env.sh \
#            ${{ secrets.REPO_OWNER }} \
#            ${{ secrets.REPO_NAME }} \
#            ${{ secrets.GIT_TOKEN }} \
#            production \
#            .env.prod
#        EOF
#
#    - name: Download dev env on PROD server
#      run: |
#        ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'
#          cd ${{ secrets.PROJ }}/
#          chmod +x sh_download_vars_env.sh
#          ./sh_download_vars_env.sh \
#            ${{ secrets.REPO_OWNER }} \
#            ${{ secrets.REPO_NAME }} \
#            ${{ secrets.GIT_TOKEN }} \
#            development \
#            .env
#        EOF
#
#    - name: Deploying the app at the PROD server
#      run: |
#        ssh -t -t -o StrictHostKeyChecking=no "${{ secrets.USERNAME }}@${{ secrets.HOST }}" << 'EOF'
#        cd ${{ secrets.PROJ }}/
#        git pull origin main
#        make down ENV=prod
#        make build ENV=prod
#        make up ENV=prod
#        make clean
#        exit
#        EOF
